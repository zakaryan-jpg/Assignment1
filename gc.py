# gc

def highest_gc_content(data):
    highest_gc_id = ""
    highest_gc = 0
    data = data.split(">")[1:] 

    for entry in data:
        lines = entry.splitlines()
        identifier = lines[0]
        sequence = "".join(lines[1:])  

        gc_content = (sequence.count('G') + sequence.count('C')) / len(sequence) * 100
        if gc_content > highest_gc:
            highest_gc = gc_content
            highest_gc_id = identifier

    return highest_gc_id, highest_gc



data = """>Rosalind_4880
CCCCTCCCGTTGAGTTCATTTTGTTTTCGAGCCGGCGACCCCTACGTCATCCCAGCGATC
AACGCTGCCCACCTATGAGCTTCCACCGAAAACCAGCCGATTGCTTATTGGTATAATGCA
TATATAAACTATTGGGTTATTCACTCTTTTAAGACAACGTTATCCCGCAACTATCACTTC
GCACTGGGCCTGGACTTTTTCCTTGACCGCTACACGGACGTGTGAGGGCATACTACGGGG
>Rosalind_6771
GCTGACTGATACTTAAAGCAAGCGACTAGAGATAACGAACGTCTAAGAGTTTTAGAGTAC
ACAAGTTCCGTATAGTACAGAGATGATCCTTATCCAGTGGAACAATTATGGCTATCCCGA
TAGAATTGCCAGGGACAGGTTGTGATAGCCCGACCCCAAAGGGGCAACTCAGCCTGCTTG
GAGCAAATTACAGCATGAAGGTGTATATGCCGATCTACTGCGTAGGGGAGCCGACTAATG
TATAGGGGTGGTCTGGTTAAGAC
>Rosalind_6933
CGTCGCCAATTGAAGCCCGTGTCAATGGGATTGGCTCTGCAGGTGACTCACACACACTAA
TTCGAATCAGCAGCTGGCTCCTTTAGTGGCCAGATACTTTTCGGTAGCGCCTGCTATAGC
TGTAGCCCCAAGATGTACAACGAGAAGTAGAACATGCACTTCGGCCTGGCTTAACACTAG
CCACAATTATTGTGGTCAAACTTTCAGCTGCTAGTATCTAGTGCAACTGTGCATTATTAA
TGATAGAATTCTTGAGGGACGACCGAAGTCCATCCGTGATCTTGGAACCAACGACTATCT
GAAGAAGGCTACCAACCCTAGAGT
"""


result_id, result_gc_content = highest_gc_content(data)
print(result_id, result_gc_content)
